import Head from "next/head";
import OpenAI from "openai";
import Form from "react-bootstrap/Form";
import Button from "react-bootstrap/Button";
import Spinner from "react-bootstrap/Spinner";
import { useState } from "react";

import dotenv from "dotenv";
dotenv.config();

export default function Home() {
  const [textAreaValue, setTextAreaValue] = useState("");
  const [result, setResult] = useState("");
  const [showInput, setShowInput] = useState(true);
  const [isLoading, setIsLoading] = useState(false);

  const handleFormSubmit = async (e) => {
    e.preventDefault();

    try {
      setIsLoading(true); // Set loading to true while fetching data
      const chatCompletion = await fetchChatCompletion(textAreaValue);
      setResult(chatCompletion.choices[0].message.content);
      setShowInput(false);
    } catch (error) {
      console.error("Error:", error);
      setResult("An error occurred while processing your request.");
    } finally {
      setIsLoading(false); // Set loading to false after data is fetched
    }
  };

  const fetchChatCompletion = async (userMessage) => {
    const openAI = new OpenAI({
      apiKey: "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",
      dangerouslyAllowBrowser: true,
    });

    const chatCompletion = await openAI.chat.completions.create({
      messages: [
        {
          role: "user",
          content: `Please convert this ${userMessage} into APA citation`,
        },
      ],
      model: "gpt-3.5-turbo",
    });

    console.log(chatCompletion.choices[0].message.content);
    return chatCompletion;
  };

  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center",
        height: "100vh",
      }}
    >
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1>Stupid Simple APA Citation Tool</h1>
      <h2>Enter your URL/string to be cited below ⤵️</h2>
      <Form onSubmit={handleFormSubmit}>
        {showInput && (
          <Form.Group className="mb-3" controlId="exampleForm.ControlTextarea1">
            <Form.Control
              as="textarea"
              rows={3}
              value={textAreaValue}
              onChange={(e) => setTextAreaValue(e.target.value)}
            />
          </Form.Group>
        )}
        {isLoading ? (
          <Button variant="primary" type="submit" disabled>
            <Spinner animation="border" size="sm" role="status">
              <span className="visually-hidden">Loading...</span>
            </Spinner>{" "}
          </Button>
        ) : (
          <Button variant="primary" type="submit">
            Submit
          </Button>
        )}
      </Form>
      {result && (
        <div>
          <h2>Response:</h2>
          <p
            style={{
              whiteSpace: "pre-line", // Preserve line breaks
            }}
            dangerouslySetInnerHTML={{
              __html: result.replace(/\n/g, "<br />"),
            }}
          ></p>
        </div>
      )}
    </div>
  );
}
